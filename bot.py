import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext
import requests
from io import BytesIO
import openpyxl
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "7781191769:AAFr2wEY9dx_-HhWVw-rYgGNIv9DFSZcw4E"
EXCEL_FILE_URL = "https://disk.yandex.ru/i/2M6hS8Hyx1BU_Q"

# –ö—ç—à –¥–∞–Ω–Ω—ã—Ö
data_cache = {
    'last_update': None,
    'data': None
}

# –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–æ–∫ –∏ –ª–∏—Å—Ç–æ–≤ Excel
sheet_map = {
    "raw_powerrise": "–°—ã—Ä—å—ë Powerrise",
    "raw_nutropro": "–°—ã—Ä—å—ë NUTROPRO",
    "ready_powerrise": "–ì–æ—Ç–æ–≤–∞—è Powerrise", 
    "ready_nutropro": "–ì–æ—Ç–æ–≤–∞—è NUTROPRO"
}

def get_excel_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ Excel —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ API –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
        api_url = f"https://cloud-api.yandex.net/v1/disk/public/resources/download?public_key={EXCEL_FILE_URL}"
        response = requests.get(api_url, timeout=10)
        response.raise_for_status()
        download_url = response.json().get('href')
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_response = requests.get(download_url, timeout=15)
        file_response.raise_for_status()
        
        return openpyxl.load_workbook(BytesIO(file_response.content), data_only=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Excel: {e}")
        raise

def create_menu():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("‚úÖ –°—ã—Ä—å—ë POWERRISE", callback_data="raw_powerrise")],
        [InlineKeyboardButton("‚úÖ –°—ã—Ä—å—ë NUTROPRO", callback_data="raw_nutropro")],
        [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–∞—è POWERRISE", callback_data="ready_powerrise")],
        [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–∞—è NUTROPRO", callback_data="ready_nutropro")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="refresh")]
    ]
    return InlineKeyboardMarkup(keyboard)

def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    update.message.reply_text(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤:",
        reply_markup=create_menu()
    )

def button_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    query.answer()

    try:
        if query.data == "refresh":
            data_cache['data'] = None
            query.edit_message_text(
                text="‚è≥ –û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ...",
                reply_markup=create_menu()
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∫–µ—à –Ω–∞ 30 –º–∏–Ω—É—Ç)
        if not data_cache['data'] or (datetime.now() - data_cache['last_update']).seconds > 1800:
            wb = get_excel_data()
            data_cache['data'] = wb
            data_cache['last_update'] = datetime.now()

        sheet_name = sheet_map.get(query.data)
        if not sheet_name:
            query.edit_message_text(
                text="‚ùå –†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=create_menu()
            )
            return

        sheet = data_cache['data'][sheet_name]
        items = []
        for row in sheet.iter_rows(min_row=2, values_only=True):
            if row and row[0]:
                items.append(f"{row[0]} ‚Äî {row[1] if len(row)>1 else 0} –∫–≥")

        if not items:
            text = f"üì≠ –†–∞–∑–¥–µ–ª '{sheet_name}' –ø—É—Å—Ç"
        else:
            text = f"üì¶ {sheet_name} (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {data_cache['last_update'].strftime('%H:%M %d.%m.%Y')})\n\n" + "\n".join(items)

        query.edit_message_text(
            text=text,
            reply_markup=create_menu()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        query.edit_message_text(
            text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=create_menu()
        )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        updater = Updater(BOT_TOKEN, use_context=True)
        dp = updater.dispatcher

        dp.add_handler(CommandHandler("start", start))
        dp.add_handler(CallbackQueryHandler(button_handler))

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞ (Render –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ)
        if 'RENDER' in os.environ:
            PORT = int(os.environ.get('PORT', 10000))
            updater.start_webhook(
                listen="0.0.0.0",
                port=PORT,
                url_path=BOT_TOKEN,
                webhook_url=f"https://{os.environ.get('RENDER_EXTERNAL_HOSTNAME')}/{BOT_TOKEN}"
            )
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ Webhook")
        else:
            updater.start_polling()
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ Polling")

        updater.idle()
    except Exception as e:
        logger.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()
